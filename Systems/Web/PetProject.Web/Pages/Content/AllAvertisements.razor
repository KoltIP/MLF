@page "/AllAdvertisements"
@layout MainLayout

@attribute [Authorize]

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IAdvertisementService advertisementService
@inject NavigationManager navigationManager
@inject ICommentService commentService
@inject IFavouriteService favouriteService
@inject ISubscribeService subscriveService

@using PetProject.Web.Pages.Advertisement.Models
@using PetProject.Web.Pages.Advertisement.Models.Advertisement
@using PetProject.Web.Pages.Advertisement.Services
@using PetProject.Web.Components
@using PetProject.Web.Pages.Advertisement.Services.Advertisement
@using PetProject.Web.Pages.Content.Models.Comment
@using PetProject.Web.Pages.Content.Services.Comment
@using PetProject.Web.Pages.Content.Services.Favourite;
@using PetProject.Web.Pages.Content.Services.Subscribe;


<MudText Typo="Typo.h4" Class="ma-8">Все объявления</MudText>

<MudTable  Items="@AdvertisementListItems"  Class="ma-8" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<AdvertisementResponse,bool>(FilterFuncSimple)">
    <ColGroup>
        <col style="width:50px;" />
        <col />
        <col />
        <col />
        <col style="width:100px;" />
    </ColGroup>
    <ToolBarContent>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e) => AddAdvertisement())">Добавить объявление</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Поиск..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<AdvertisementResponse, object>(x=>x.PetName)">Имя</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AdvertisementResponse, object>(x=>x.PetDescription)">Описание</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AdvertisementResponse, object>(x=>x.PetType)">Тип</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AdvertisementResponse, object>(x=>x.PetBreed)">Порода</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AdvertisementResponse, object>(x=>x.PetColor)">Цвет</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AdvertisementResponse, object>(x=>x.Price)">Вознаграждение</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>   
        <MudTd DataLabel="Имя">@context.PetName</MudTd>        
        <MudTd DataLabel="Описание">@context.PetDescription</MudTd>
        <MudTd DataLabel="Тип">@context.PetType</MudTd>
        <MudTd DataLabel="Порода">@context.PetBreed</MudTd>
        <MudTd DataLabel="Цвет">@context.PetColor</MudTd>
        <MudTd DataLabel="Вознаграждение">@context.Price</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Filled.RemoveRedEye" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => Open(context.Id))" />
            <MudIconButton Icon="@Icons.Material.Filled.FavoriteBorder" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => AddInFavourite(context.Id))" />
            <MudIconButton Icon="@Icons.Filled.Announcement" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => OpenComment(context.Id))" />
            <MudIconButton Icon="@Icons.Filled.AddComment" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => AddComment(context.Id))" />
            <MudIconButton Icon="@Icons.Filled.Subscriptions" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => AddSubscribe(context.Id))" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
    <col />

<MudTable Items="@CommentListItems" Class="@invis" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped">
    <ColGroup>
        <col />
        <col style="width:100px;" />
    </ColGroup>
    <ToolBarContent>
        <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-3">Комментарии</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Filled.Close" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => CloseComment())"/>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<CommentListItem, object>(x=>x.UserName)">Имя пользователя</MudTableSortLabel></MudTh>
        <MudTh>Комментарий</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Имя пользователя">@context.UserName</MudTd>
        <MudTd DataLabel="Комментарий">@context.Content</MudTd>
        <MudTd>
            <MudTooltip Text="Изменить">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => UpdateComment(context.Id, context.AdvertisementId))" />
            </MudTooltip>
            <MudTooltip Text="Удалить">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => DeleteComment(context.Id, context.AdvertisementId))" />
            </MudTooltip>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>



@code {

    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;

    private string searchString = "";

    private IEnumerable<AdvertisementResponse> AdvertisementListItems = new List<AdvertisementResponse>();    
    private IEnumerable<CommentListItem> CommentListItems = new List<CommentListItem>();
    private string invis = "invisible ma-8";
    private int idAdvertisement;

    private async Task ReloadData()
    {
        AdvertisementListItems = await advertisementService.GetAdvertisements(0, 10000);
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }


    private bool FilterFuncSimple(AdvertisementResponse AdvertisementListItems) => FilterFunc(AdvertisementListItems, searchString);


    private bool FilterFunc(AdvertisementResponse AdvertisementListItems, string searchString)
    {
        return 
            string.IsNullOrWhiteSpace(searchString)
            ||

            AdvertisementListItems.PetColor.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)
            ||
            AdvertisementListItems.PetBreed.ToString().Contains(searchString)
            ||
            AdvertisementListItems.PetType.ToString().Contains(searchString)
        ;
    }


    private async Task AddAdvertisement()
    {
        var parameters = new DialogParameters {};
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = DialogService.Show<AdvertisementDialog>("Добавить объявление", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var addResult = await advertisementService.AddAdvertisement(((AdvertisementDialog)dialog.Dialog).model);
            await ReloadData();
            if (addResult.ErrorCode != 0)
                Snackbar.Add(addResult.Message, Severity.Error);            
        }
    }    


    private async Task Open(int advertisementId)
    {
        var parameters = new DialogParameters {};
        parameters.Add("advertisementId", advertisementId);
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = DialogService.Show<ConcreateAdvertisementDialog>("Комментарий", parameters, options);       
    }


    private async Task OpenComment(int advertisementId)
    {
        invis = "ma-8";
        CommentListItems = await commentService.GetComments(advertisementId);
    }


    private async Task AddComment(int advertisementId)
    {
        var parameters = new DialogParameters {};
        parameters.Add("advertisementId", advertisementId);
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = DialogService.Show<CommentDialog>("Добавить комментарий", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await commentService.AddComment(((CommentDialog)dialog.Dialog).model);
            CommentListItems = await commentService.GetComments(advertisementId);
        }
    }


    private async Task CloseComment()
    {
        invis =  "invisible ma-8";
    }


    private async Task UpdateComment(int commentId, int advertisementId)
    {
        var parameters = new DialogParameters();
        parameters.Add("CommentId", commentId);
        parameters.Add("AdvertisementId", advertisementId);


        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<CommentDialog>("Изменить комментарий", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var res = await commentService.UpdateComment(commentId,((CommentDialog)dialog.Dialog).model);
            if (res.Message==null)//else
            {
                invis = "ma-8";
                CommentListItems = await commentService.GetComments(advertisementId);
            }

        }

    }


    private async Task DeleteComment(int commentId, int advertisementId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Вы уверены, что хотитие удалить комментарий?");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new MudBlazor.DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmationDialog>("Удаление комментария", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var res = await commentService.DeleteComment(commentId);
            if (res.Message==null)//else
            {
                invis = "ma-8";
                CommentListItems = await commentService.GetComments(advertisementId);
            }

        }
    }


    private async Task AddInFavourite(int advertisementId)
    {
        await favouriteService.AddInFavourite(advertisementId);
        Snackbar.Add("Успешно добавлено в избранное!");
    }


    private async Task AddSubscribe(int advertisementId)
    {        
        await subscriveService.AddSubscribe(advertisementId);
        Snackbar.Add("Вы успешно подписаны!");
    }
}