@using Microsoft.AspNetCore.Http;
@using PetProject.Web.Pages.Advertisement.Models.Breed
@using PetProject.Web.Pages.Advertisement.Models.Color
@using PetProject.Web.Pages.Advertisement.Models.Type
@using PetProject.Web.Pages.Content.Models.Breed
@using PetProject.Web.Pages.Content.Models.City;
@using PetProject.Web.Pages.Content.Models.Color
@using PetProject.Web.Pages.Content.Models.File;
@using PetProject.Web.Pages.Content.Models.Type
@using PetProject.Web.Pages.Advertisement.Services.Advertisement
@using PetProject.Web.Pages.Advertisement.Models.Advertisement
@using MudBlazor.Interfaces;
@using MudBlazor.Components;
@using MudBlazor.Internal;
@using System;
@using System.IO;
@using System.Drawing;
@using System.Drawing.Imaging;
@using PetProject.Web.Pages.Content.Services.Location;

@inherits MudComponentBase
@inject ISnackbar Snackbar

@inject IAdvertisementService advertisementService
@inject ILocationService locationService

<MudDialog>
    <DialogContent>
        <MudForm Model="model" @ref="form" Validation="@(modelValidator.ValidateValue)">
            <MudGrid>

                <MudItem xs="6" sm="6">
                    @if (filePathes.Count > 0)
                    {                        
                        <MudCarousel Style="height:200px;width:450px;" ShowArrows="@arrows" ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object">
                            @for (int i = 0; i < filePathes.Count(); i++)
                            {
                                int localIndex = i;
                                <MudCarouselItem Transition="transition" Color="@MudBlazor.Color.Default">                                    
                                    <div class="d-flex" style="height:100%;margin-left:11%">                                        
                                        <MudImage Src="@filePathes[localIndex]" Alt="Изображение не загружено" Class="rounded-lg" Style="height:200px;width:350px;"></MudImage>
                                    </div>
                                </MudCarouselItem>
                            }
                        </MudCarousel>
                    }
                    else
                    {
                        <MudImage Src="#" Alt="Изображение не загружено" Class="rounded-lg" Style="height:100px;width:150px;"></MudImage>
                    }
                    <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="ShowImage" Accept=".jpg" MaximumFileCount="3" Style="margin-left:15%;">
                        <ButtonTemplate>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="MudBlazor.Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"                                      
                                       for="@context">
                                Загрузить фотографию
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                </MudItem>

                
                
                <MudItem xs="6" sm="6">
                    <MudTextField Label="Отличительные черты"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Description"
                                  For="@(() => model.PetDescription)"
                                  @bind-Value="model.PetDescription"
                                  Required="false"
                                  RequiredError="Описание обязательно!"></MudTextField>
                </MudItem>

                <MudItem xs="6" sm="6">
                    <MudTextField Label="Имя" @bind-Value="model.PetName"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.DriveFileRenameOutline"
                                  For="@(() => model.PetName)"
                                  Required="false"
                                  RequiredError="Имя обязательно!">
                    </MudTextField>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudSelect @ref="selectFindType" T="int" Label="Тип объявления" @bind-Value="model.IsWanted" For="@(() => model.IsWanted)"
                               Adornment="Adornment.End"
                               AdornmentIcon="@Icons.Material.Filled.Flaky">
                        <MudSelectItem T="int" Value="1">Разыскивается</MudSelectItem>
                        <MudSelectItem T="int" Value="0">Найдено</MudSelectItem>
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudSelect @ref="selectGender" T="int" Label="Пол" @bind-Value="model.Gender" For="@(() => model.Gender)"
                               Adornment="Adornment.End"
                               AdornmentIcon="@Icons.Material.Filled.Wc">
                        <MudSelectItem T="int" Value="1">Мужской</MudSelectItem>
                        <MudSelectItem T="int" Value="0">Женский</MudSelectItem>
                    </MudSelect>
                </MudItem>


                <MudItem xs="6" >
                    <MudTextField Label="Вознаграждение"
                                  For="@(() => model.Price)"
                                  @bind-Value="model.Price"
                                  Required="false"
                                  RequiredError="Вознаграждение обязательно!"
                                  Adornment="Adornment.End" 
                                  AdornmentIcon="@Icons.Material.Filled.CurrencyRuble"></MudTextField>
                </MudItem>


                <MudItem xs="12" sm="6">
                    <MudSelect 
                        @ref="selectColor"
                        T="int"
                        Label="Цвет"
                        @bind-Value="model.PetColorId"
                        For="@(() => model.PetColorId)"
                        Adornment="Adornment.End"
                        AdornmentIcon="@Icons.Material.Filled.Palette">
                        <MudSelectItem T="int" Value="0">&nbsp;</MudSelectItem>
                        @foreach (var color in _colors)
                        {
                            <MudSelectItem T="int" Value="@color.Id">@color.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>


                <MudItem xs="12" sm="6">
                    <MudSelect @ref="selectType" T="int" Label="Тип" @bind-Value="model.PetTypeId" For="@(() => model.PetTypeId)"
                               Adornment="Adornment.End"
                               AdornmentIcon="@Icons.Material.Filled.GeneratingTokens">
                        <MudSelectItem T="int" Value="0">&nbsp;</MudSelectItem>
                        @foreach (var type in _typies)
                        {
                            <MudSelectItem T="int" Value="@type.Id">@type.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>


                <MudItem xs="12" sm="6">
                    <MudSelect Adornment="Adornment.End"
                               AdornmentIcon="@Icons.Material.Filled.Interests"
                        OnOpen="()=>LoadDependendenseBreeds()" @ref="selectBreed" T="int" Label="Порода" @bind-Value="model.PetBreedId" For="@(() => model.PetBreedId)">
                        <MudSelectItem T="int" Value="0">&nbsp;</MudSelectItem>
                        @foreach (var breed in _breeds)
                        {
                            <MudSelectItem T="int" Value="@breed.Id">@breed.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudNumericField @bind-Value="model.Age" Label="Возраст" Variant="Variant.Text" Min="0" Max="100" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudDatePicker Label="Дата" @bind-Date="model.DateLost" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudSelect 
                        @ref="selectCity"
                        T="int"
                        Label="Город"
                        @bind-Value="model.CityId"
                        For="@(() => model.CityId)"
                        Adornment="Adornment.End"
                        AdornmentIcon="@Icons.Material.Filled.LocationCity">
                        <MudSelectItem T="int" Value="0">&nbsp;</MudSelectItem>
                        @foreach (var city in _cities)
                        {
                            <MudSelectItem T="int" Value="@city.Id">@city.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

               

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отмена</MudButton>
        <MudButton Color="MudBlazor.Color.Primary" OnClick="Submit">Сохранить</MudButton>
    </DialogActions>
</MudDialog>

@code {

    private bool arrows = true;
    private bool bullets = false;
    private bool enableSwipeGesture = true;
    private bool autocycle = false;
    private Transition transition = Transition.Slide;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;

    MudForm form = default!;
    MudSelect<int> selectBreed = default!;
    MudSelect<int> selectFindType = default!;
    MudSelect<int> selectGender = default!;
    MudSelect<int> selectType = default!;
    MudSelect<int> selectColor = default!;
    MudSelect<int> selectCity = default!;

    AdvertisementDialogModelValidator modelValidator = new AdvertisementDialogModelValidator();

    private List<TypeModel> _typies { get; set; } = new List<TypeModel>();
    private List<BreedModel> _breeds { get; set; } = new List<BreedModel>();
    private List<ColorModel> _colors { get; set; } = new List<ColorModel>();
    private List<CityModel> _cities { get; set; } = new List<CityModel>();

    private int selectedTypeId = 0;
    private int selectedBreedId = 0;
    private int selectedColorid = 0;

    bool isNew = false;

    List<string> filePathes = new List<string>();

    [Parameter]
    public int? AdvertisementId { get; set; } = default;

    [Parameter]
    public AdvertisementDialogModel model { get; set; } = new() { PetTypeId = 0, PetBreedId = 0, PetColorId = 0};

    protected override async Task OnInitializedAsync()
    {
        model.Images = new List<FileModel>();

        var typies = await advertisementService.GetTypeList();
        _typies.AddRange(typies);

        var breeds = await advertisementService.GetBreedList();
        _breeds.AddRange(breeds);

        var colors = await advertisementService.GetColorList();
        _colors.AddRange(colors);

        var cities = await locationService.GetCitiesAsync();
        _cities.AddRange(cities);

        isNew = AdvertisementId == null;
        if (!isNew)
        {
            var advertisement = await advertisementService.GetAdvertisement(AdvertisementId ?? 0);

            model.PetName = advertisement.PetName;
            model.PetDescription = advertisement.PetDescription;
            model.Price = advertisement.Price;
            model.Id = advertisement.Id;
            model.PetTypeId = advertisement.PetTypeId;
            model.PetBreedId = advertisement.PetBreedId;
            model.PetColorId = advertisement.PetColorId;
            model.IsWanted = advertisement.IsWanted == true ? 1 : 0;
            model.Gender = advertisement.Gender == true ? 1 : 0;
        }

        await selectType.SelectOption(model.PetTypeId);
        await selectBreed.SelectOption(model.PetBreedId);
        await selectColor.SelectOption(model.PetColorId);
        await selectCity.SelectOption(model.CityId);
        form.ResetValidation();
    }

    public async Task LoadDependendenseBreeds()
    {
        int? selectTypeValue = selectType.Value;
        if (selectTypeValue.HasValue)        
            _breeds = (await advertisementService.GetBreedsWithTypeId(selectTypeValue.Value)).ToList();        
    }

    async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    void Cancel() => MudDialog.Cancel();

    private async Task ShowImage(IReadOnlyList<IBrowserFile> inputFiles)
    {
        for (int i = 0; i < inputFiles.Count(); i++)
        {
            var buffer = new byte[inputFiles[i].Size];
            await inputFiles[i].OpenReadStream().ReadAsync(buffer);

            model.Images.Add(new FileModel()
            {
                Content = buffer,
                ContentType = inputFiles[i].ContentType
            });

            //show
            var base64 = Convert.ToBase64String(buffer);
            var fs = string.Format("data:image/jpg;base64,{0}", base64);
            filePathes.Add(fs);
        }
    }

    
}
