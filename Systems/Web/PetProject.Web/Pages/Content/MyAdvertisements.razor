@page "/MyAdvertisements"
@layout MainLayout

@attribute [Authorize]

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IAdvertisementService advertisementService
@inject NavigationManager navigationManager

@using PetProject.Web.Pages.Advertisement.Models
@using PetProject.Web.Pages.Advertisement.Models.Advertisement
@using PetProject.Web.Pages.Advertisement.Services
@using PetProject.Web.Components
@using PetProject.Web.Pages.Advertisement.Services.Advertisement
@using PetProject.Web.Pages.Content.Models.Advertisement;
@using PetProject.Web.Pages.Content.Models.Comment


<MudText Typo="Typo.h4" Class="ma-8">Мои объявления</MudText>

@if (!_isLoading)
{
    <MudGrid xs="12" sm="6">
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="@((e) => Add())" Style="margin-left:35px;">Добавить объявление</MudButton>
        
        <MudButton StartIcon="@Icons.Material.Filled.Update" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="@((e) => ReloadData())" Style="margin-left:35px;">Обновить</MudButton>

        <MudItem xs="12" Style="margin-left:25px;margin-right:25px;">
            <MudGrid Justify="justification">
                @for (int i = 0; i < _pathes.Count(); i++)
                {
                    int localIndex = i;
                    <MudItem xs="2">
                        <MudPaper Class="d-flex flex-column align-center justify-center py-8">
                            <MudCarousel ShowArrows="@arrows" ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object" Style="height:200px;width:250px;">
                                @for (int j = 0; j < _pathes[localIndex].Count(); j++)
                                {
                                    int localJindex = j;
                                    <MudCarouselItem Transition="transition" Color="@MudBlazor.Color.Default">
                                        <MudImage Src="@_pathes[localIndex][localJindex]" Alt="Ошибка поиска" Style="height:100%;width:100%;" />
                                    </MudCarouselItem>
                                }
                            </MudCarousel>
                            <Row Style="margin-top:15px;">
                                <MudIconButton Icon="@Icons.Filled.RemoveRedEye" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Small" OnClick="@((e) => Open(advertisements[localIndex]))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Small" />
                                <MudIconButton Icon="@Icons.Filled.Delete" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Small" />
                            </Row>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>
    </MudGrid>

    <div style="margin-top:20px;margin-left:35%">
        <MudPagination Color="Color.Primary" Count="@count" Variant="Variant.Text" SelectedChanged="@((e) => ChangePage(e))" />
    </div>
}
else
{
    <MudItem xxl="12">
        <MudProgressCircular Color="MudBlazor.Color.Success" Indeterminate="true" Style="height:70px;width:70px; position:absolute;top: 350%;left: 50%;" />
    </MudItem>
}

@code {    
    private Justify justification = Justify.FlexStart;

    private bool arrows = true;
    private bool bullets = false;
    private bool enableSwipeGesture = true;
    private bool autocycle = false;
    private Transition transition = Transition.None;

    private int _selectedPage = 1;
    private bool _isLoading { get; set; } = true;
    private List<AdvertisementResponse> advertisements = new List<AdvertisementResponse>();
    private int count = 0;
    private const int countAdvertisementOnPage = 12;
    private string[][] _pathes { get; set; } = null;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task ReloadData()
    {
        try
        {
            var advertisementsResponseList = (await advertisementService.GetUserAdvertisements(_selectedPage));
            advertisements = advertisementsResponseList.Advertisements;
            count = advertisementsResponseList.Count / countAdvertisementOnPage + 1;
            _pathes = await GetImagesPath(advertisements);
            _isLoading = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<string[][]> GetImagesPath(IEnumerable<AdvertisementResponse> advertisementResponse)
    {
        var advertisements = advertisementResponse.ToList();
        var result = new string[advertisements.Count()][];

        for (int i = 0; i < advertisements.Count(); i++)
        {
            var advertisement = advertisements[i];
            var iteration = new string[advertisement.Images.Count()];
            for (int j = 0; j < advertisement.Images.Count(); j++)
            {
                var base64 = Convert.ToBase64String(advertisement.Images[j].Content);
                var fs = string.Format("data:image/jpg;base64,{0}", base64);
                iteration[j] = fs;
            }
            result[i] = iteration;
        }
        return result;
    }

    private async Task ChangePage(int page)
    {
        _selectedPage = page;
        var advertisementsResponseList = (await advertisementService.GetAdvertisements(page));
        advertisements = advertisementsResponseList.Advertisements;
        count = advertisementsResponseList.Count / countAdvertisementOnPage + 1;
        _pathes = await GetImagesPath(advertisements);
    }

    private async Task Add()
    {
        var parameters = new DialogParameters { };
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = DialogService.Show<AddOrEditAdvertisementDialog>("Добавить объявление", parameters, options);
        var result = await dialog.Result;
        if (result != null)
        {
            if (!result.Cancelled)
            {
                var addResult = await advertisementService.AddAdvertisement(((AddOrEditAdvertisementDialog)dialog.Dialog).model);
                await OnInitializedAsync();
                if (addResult.ErrorCode != 0)
                    Snackbar.Add(addResult.Message, Severity.Error);
                else
                    Snackbar.Add("Объявление успешно добавлено!", Severity.Success);
            }
        }
        else
            Snackbar.Add("Произошла непредвиденная ошибка. Попробуйте повторить операцию позже.", Severity.Error);
    }


    private void Open(AdvertisementResponse advertisementResponse)
    {
        var parameters = new DialogParameters { };
        parameters.Add("advertisementResponse", advertisementResponse);
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<OpenAdvertisementDialog>("Подробности", parameters, options);
    }


    private async Task EditAdvertisement(int advertisementId)
    {
        //var parameters = new DialogParameters();
        //parameters.Add("AdvertisementId", advertisementId);

        //var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        //var dialog = DialogService.Show<AdvertisementDialog>("Изменение объявления", parameters, options);
        //var result = await dialog.Result;

        //if (!result.Cancelled)
        //{
        //    var editResult = await advertisementService.EditAdvertisement(advertisementId, ((AdvertisementDialog)dialog.Dialog).model);
        //    await ReloadData();
        //    if (editResult.ErrorCode != null)
        //        Snackbar.Add(editResult.Message, Severity.Error);            
        //}
    }


    private async Task DeleteAdvertisement(int advertisementId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Вы уверены, что хотите удалить объявление? Отменить это действие будет невозможно.");
        parameters.Add("ButtonText", "Удаление");
        parameters.Add("Color", Color.Error);

        var options = new MudBlazor.DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmationDialog>("Удаление объявления", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
           var deleteResult = await advertisementService.DeleteAdvertisement(advertisementId);
           await ReloadData();
           if (deleteResult.ErrorCode != null)
                Snackbar.Add(deleteResult.Message, Severity.Error);
            
        }
    }


    //private async Task OpenComment(int advertisementId)
    //{
    //    invis = "ma-8";
    //    CommentListItems = await commentService.GetComments(advertisementId);
    //}

    //private async Task AddComment(int advertisementId)
    //{
    //    var parameters = new DialogParameters {};
    //    parameters.Add("advertisementId", advertisementId);
    //    var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

    //    var dialog = DialogService.Show<CommentDialog>("Add comment", parameters, options);
    //    var result = await dialog.Result;

    //    if (!result.Cancelled)
    //    {
    //        await commentService.AddComment(((CommentDialog)dialog.Dialog).model);
    //        CommentListItems = await commentService.GetComments(advertisementId);
    //    }
    //}


    //private async Task CloseComment()
    //{
    //    invis =  "invisible ma-8";
    //}

    //private async Task UpdateComment(int commentId, int advertisementId)
    //{
    //    var parameters = new DialogParameters();
    //    parameters.Add("CommentId", commentId);
    //    parameters.Add("AdvertisementId", advertisementId);


    //    var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
    //    var dialog = DialogService.Show<CommentDialog>("Update comment", parameters, options);
    //    var result = await dialog.Result;

    //    if (!result.Cancelled)
    //    {
    //        var res = await commentService.UpdateComment(commentId,((CommentDialog)dialog.Dialog).model);
    //        if (res.Message==null)//else
    //        {
    //            invis = "ma-8";
    //            CommentListItems = await commentService.GetComments(advertisementId);
    //        }

    //    }

    //}

    //private async Task DeleteComment(int commentId, int advertisementId)
    //{
    //    var parameters = new DialogParameters();
    //    parameters.Add("ContentText", "Are you sure, thay you want to delete this comment?");
    //    parameters.Add("ButtonText", "Delete");
    //    parameters.Add("Color", Color.Error);

    //    var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

    //    var dialog = DialogService.Show<ConfirmationDialog>("Delete comment", parameters, options);
    //    var result = await dialog.Result;

    //    if (!result.Cancelled)
    //    {
    //        var res = await commentService.DeleteComment(commentId);
    //        if (res.Message==null)//else
    //        {
    //            invis = "ma-8";
    //            CommentListItems = await commentService.GetComments(advertisementId);
    //        }

    //    }
    //}

    //private async Task AddSubscribe(int advertisementId)
    //{        
    //    await advertisementService.AddSubscribe(advertisementId);
    //    Snackbar.Add("You have successfully subscribed");
    //}
}