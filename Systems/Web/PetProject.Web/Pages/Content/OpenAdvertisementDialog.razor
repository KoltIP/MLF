@using PetProject.Web.Pages.Advertisement.Models.Advertisement
@using PetProject.Web.Pages.Advertisement.Services.Advertisement
@using PetProject.Web.Pages.Content.Models.Comment;
@using PetProject.Web.Pages.Content.Services.Comment;
@inherits MudComponentBase

@inject NavigationManager navigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IAdvertisementService advertisementService
@inject ICommentService commentService
<MudDialog>
    <DialogContent>
        <MudContainer Style="max-height: 400px; overflow-y: scroll">
            <MudForm Model="model" >
                <MudGrid Spacing="2">

                    <MudItem xs="12" sm="2">
                        <MudImage
                            Width="150"
                            Height="115"
                            Src="@path"
                            Alt="Ошибка поиска"
                            Elevation="25" 
                            Class="rounded-lg" />
                    </MudItem>

                    <MudItem xs="12" sm="3">
                        <MudTextField Label="Разыскивается/Найдено"
                                            ReadOnly
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.Flaky"
                                      For="@(()=>isWanted)"
                                      @bind-Value="isWanted">
                        </MudTextField>
                        </MudItem>

                    <MudItem xs="12" sm="2">
                    <MudTextField Label="Пол"
                                        ReadOnly
                                    Adornment="Adornment.End"
                                    AdornmentIcon="@Icons.Material.Filled.Wc"
                                    For="@(()=>gender)"
                                    @bind-Value="gender">
                    </MudTextField>
                    </MudItem>

                    <MudItem xs="12" sm="2">
                        <MudTextField Label="Имя" @bind-Value="model.PetName"
                                            ReadOnly
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.DriveFileRenameOutline"
                                      For="@(() => model.PetName)">
                        </MudTextField>
                        </MudItem>
                     
                    <MudItem xs="12" sm="3">
                    <MudTextField Label="Город"
                                    Adornment="Adornment.End"
                                        ReadOnly
                                    AdornmentIcon="@Icons.Material.Filled.LocationCity"
                                    For="@(() => model.City)"
                                    @bind-Value="model.City">
                    </MudTextField>
                    </MudItem>

                    <MudItem xs="12" sm="2">
                    <MudTextField Label="Дата"
                                        ReadOnly
                                    Adornment="Adornment.End"
                                    AdornmentIcon="@Icons.Material.Filled.DateRange"
                                    For="@(() => model.DateLost)"
                                    @bind-Value="model.DateLost">
                    </MudTextField>
                    </MudItem>

                    <MudItem xs="12" sm="2">
                        <MudTextField Label="Цвет"
                                        ReadOnly
                                        Adornment="Adornment.End"
                                        AdornmentIcon="@Icons.Material.Filled.Palette"
                                        For="@(() => model.PetColor)"
                                        @bind-Value="model.PetColor">
                        </MudTextField>
                    </MudItem>

                    <MudItem xs="12" sm="2">
                        <MudTextField Label="Тип"
                                        ReadOnly
                                        Adornment="Adornment.End"
                                        AdornmentIcon="@Icons.Material.Filled.GeneratingTokens"
                                        For="@(() => model.PetType)"
                                        @bind-Value="model.PetType">
                        </MudTextField>
                    </MudItem>

                    <MudItem xs="12" sm="3">
                        <MudTextField Label="Порода"
                                        ReadOnly
                                        Adornment="Adornment.End"
                                        AdornmentIcon="@Icons.Material.Filled.Interests"
                                        For="@(() => model.PetBreed)"
                                        @bind-Value="model.PetBreed">
                        </MudTextField>
                    </MudItem>

                    <MudItem xs="12" sm="1">
                        <MudTextField Label="Возраст"
                                        ReadOnly
                                        Adornment="Adornment.End"
                                        AdornmentIcon="@Icons.Material.Filled.ShortText"
                                        For="@(() => model.Age)"
                                        @bind-Value="model.Age">
                        </MudTextField>
                    </MudItem>
                
                    <MudItem xs="12" sm="2">
                        <MudTextField Label="Вознаграждение"
                                            ReadOnly
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.CurrencyRuble"
                                      For="@(() => model.Price)"
                                      @bind-Value="model.Price">
                        </MudTextField>
                        </MudItem>

                    <MudItem xs="12" sm="12">
                        <MudTextField Label="Отличительные черты"
                                            ReadOnly
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.Description"
                                      For="@(() => model.PetDescription)"
                                      @bind-Value="model.PetDescription">
                        </MudTextField>
                        </MudItem>

                </MudGrid>
                
                <MudButton 
                    OnClick="@((e) => OpenComment(model.Id))"
                    EndIcon="@Icons.Material.Filled.CommentBank"
                    Variant="Variant.Filled"
                    Color="MudBlazor.Color.Primary"
                    Style="margin-top:15px;margin-right:10px;">
                    Показать комментарии
                </MudButton>
                
                <MudButton 
                    OnClick="@((e) => AddComment())"
                    EndIcon="@Icons.Material.Filled.AddComment"
                    Variant="Variant.Filled"
                    Color="MudBlazor.Color.Primary"
                    Style="margin-top:15px;">
                    Добавить комментарии
                </MudButton>

            </MudForm>
            @if (isCommentOpen)
            {
                <MudStack style="margin-top:15px;margin-bottom:25px;">
                    @for (int i = 0; i < commentListItems.Count();i++)
                    {                        
                        int localIndex = i;

                        <MudPaper Class="pa-3" style="box-shadow: 5px 5px 5px;">
                            <div style="display:flex;flex:1;flex-direction:row;flex-wrap:nowrap;">
                                <MudImage Width="60"
                                  Height="50"
                                  Src="https://avatars.mds.yandex.net/i?id=a0e9a8bbf4cdc5675bf4b2ed8c8ff768b5a7ee84-7756218-images-thumbs&n=13"
                                  Alt="Ошибка поиска"
                                  Elevation="25"
                                  Class="rounded-lg" />
                                <div style="display:flex;flex:1;flex-direction:column;flex-wrap:nowrap;margin-left:10px;">
                                    <MudText>@commentListItems[localIndex].UserName</MudText>
                                    <MudText>@commentListItems[localIndex].Content</MudText>
                                </div>
                            </div>
                        </MudPaper>
                    }
                </MudStack>
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отмена</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool isCommentOpen = false;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;


    [Parameter]
    public AdvertisementResponse advertisementResponse { get; set; } = default;
    private string path { get; set; }
    private string isWanted { get; set; }
    private string gender { get; set; }

    private AdvertisementResponse model { get; set; } = new AdvertisementResponse();
    private List<CommentListItem> commentListItems = new List<CommentListItem>();

    protected override async Task OnInitializedAsync()
    {
        model = advertisementResponse;
        isWanted = model.IsWanted == true ? "Разыскивается" : "Найдено";
        gender = model.Gender == true ? "Мужской" : "Женский";
        path = await GetImagePath(advertisementResponse);
    }    

    void Cancel() => MudDialog.Cancel();

    private async Task<string> GetImagePath(AdvertisementResponse advertisementResponse)
    {
        string path = string.Empty;
        var base64 = Convert.ToBase64String(advertisementResponse.Images[0].Content);
        var fs = string.Format("data:image/jpg;base64,{0}", base64);
        path = fs;
        return path;
    }

    private async Task OpenComment(int advertisementId)
    {
        commentListItems = (await commentService.GetComments(advertisementId)).ToList();
        isCommentOpen = !isCommentOpen;        
    }

    private async Task AddComment()
    {
        var parameters = new DialogParameters { };
        parameters.Add("advertisementId", model.Id);
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<CommentDialog>("Добавить комментарий", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await commentService.AddComment(((CommentDialog)dialog.Dialog).model);
            commentListItems = (await commentService.GetComments(model.Id)).ToList();
        }
    }
}