@page "/AllAdvertisements_V4"
@layout MainLayout

@attribute [Microsoft.AspNetCore.Authorization.Authorize]

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IAdvertisementService advertisementService
@inject NavigationManager navigationManager
@inject ICommentService commentService

@using PetProject.Web.Pages.Advertisement.Models
@using PetProject.Web.Pages.Advertisement.Models.Advertisement
@using PetProject.Web.Pages.Advertisement.Services
@using PetProject.Web.Components
@using PetProject.Web.Pages.Advertisement.Services.Advertisement
@using PetProject.Web.Pages.Content.Models.Advertisement;
@using PetProject.Web.Pages.Content.Models.Comment
@using PetProject.Web.Pages.Content.Models.File;
@using PetProject.Web.Pages.Content.Services.Comment;


<MudText Typo="Typo.h4" Class="ma-8">Все объявления_V4</MudText>


@if (!_isLoading)
{
    <MudGrid xs="12" sm="6">
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="@((e) => Add())" Style="margin-left:35px;">Добавить объявление</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.FilterAlt" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="@((e) => Filtering())" Style="margin-left:35px;">Изменить фильтры</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Update" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="@((e) => ReloadData())" Style="margin-left:35px;">Обновить</MudButton>

        <MudItem xs="12" Style="margin-left:25px;margin-right:25px;">
            <MudGrid Justify="justification">
                @for (int i = 0; i < _pathes.Count(); i++)
                {
                    int localIndex = i;
                    <MudItem xs="2">
                        <MudPaper Class="d-flex flex-column align-center justify-center py-8" >
                        <MudCarousel ShowArrows="@arrows" ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object" Style="height:200px;width:250px;">
                                @for (int j = 0; j < _pathes[localIndex].Count(); j++)
                                {
                                    int localJindex = j;
                                    <MudCarouselItem Transition="transition" Color="@MudBlazor.Color.Default">
                                        <MudImage Src="@_pathes[localIndex][localJindex]" Alt="Ошибка поиска" Style="height:100%;width:100%;" />
                                    </MudCarouselItem>
                                }
                            </MudCarousel>
                            <Row Style="margin-top:15px;">
                                <MudIconButton Icon="@Icons.Filled.RemoveRedEye" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Small" OnClick="@((e) => Open(advertisements[localIndex]))" />
                                <MudIconButton Icon="@Icons.Material.Filled.FavoriteBorder" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Small" />
                                <MudIconButton Icon="@Icons.Filled.Announcement" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Small" />
                                <MudIconButton Icon="@Icons.Filled.AddComment" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Small" />
                                <MudIconButton Icon="@Icons.Filled.Subscriptions" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Small" />
                            </Row>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>    
    </MudGrid>

    <div style="margin-top:20px;margin-left:35%">
        <MudPagination Color="Color.Primary" Count="@count" Variant="Variant.Text" SelectedChanged="@((e) => ChangePage(e))" />
    </div>
}
else
{
    <MudItem xxl="12">
        <MudProgressCircular Color="MudBlazor.Color.Success" Indeterminate="true" Style="height:70px;width:70px; position:absolute;top: 350%;left: 50%;" />
    </MudItem>
}

<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>


@code {
    private Justify justification = Justify.FlexStart;

    private bool arrows = true;
    private bool bullets = false;
    private bool enableSwipeGesture = true;
    private bool autocycle = false;
    private Transition transition = Transition.Slide;


    private int _selectedPage = 1;
    private bool _isLoading { get; set; } = true;
    private AdvertisementFilterModel filter = null;
    private List<AdvertisementResponse> advertisements = new List<AdvertisementResponse>();
    private int count = 0;
    private const int countAdvertisementOnPage = 12;
    private string[][] _pathes { get; set; } = null;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task ReloadData()
    {
        try
        {
            filter = await advertisementService.GetFilter();
            var advertisementsResponseList = (await advertisementService.GetAdvertisements(_selectedPage));
            advertisements = advertisementsResponseList.Advertisements;
            count = advertisementsResponseList.Count / countAdvertisementOnPage + 1;
            _pathes = await GetImagesPath(advertisements);
            _isLoading = false;
        }
        catch(Exception ex)
        {            
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }      

    private async Task<string[][]> GetImagesPath(IEnumerable<AdvertisementResponse> advertisementResponse)
    {
        var advertisements = advertisementResponse.ToList();
        var result = new string[advertisements.Count()][];

        for (int i = 0; i < advertisements.Count(); i++)
        {
            var advertisement = advertisements[i];
            var iteration = new string[advertisement.Images.Count()];
            for (int j = 0; j < advertisement.Images.Count(); j++)
            {
                var base64 = Convert.ToBase64String(advertisement.Images[j].Content);
                var fs = string.Format("data:image/jpg;base64,{0}", base64);
                iteration[j] = fs;
            }
            result[i] = iteration;
        }
        return result;
    }

    private async Task ChangePage(int page)
    {
        _selectedPage = page;
        var advertisementsResponseList = (await advertisementService.GetAdvertisements(page));
        advertisements = advertisementsResponseList.Advertisements;
        count = advertisementsResponseList.Count / countAdvertisementOnPage + 1;
        _pathes = await GetImagesPath(advertisements);
    }
        
    private async Task Add()
    {
        var parameters = new DialogParameters { };
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = DialogService.Show<AddOrEditAdvertisementDialog>("Добавить объявление", parameters, options);
        var result = await dialog.Result;
        if (result != null)
        {
            if (!result.Cancelled)
            {
                var addResult = await advertisementService.AddAdvertisement(((AddOrEditAdvertisementDialog)dialog.Dialog).model);
                await OnInitializedAsync();
                if (addResult.ErrorCode != 0)
                    Snackbar.Add(addResult.Message, Severity.Error);
                else
                    Snackbar.Add("Объявление успешно добавлено!", Severity.Success);
            }            
        }
        else
            Snackbar.Add("Произошла непредвиденная ошибка. Попробуйте повторить операцию позже.", Severity.Error);
    }

    private async Task Filtering()
    {        
        var parameters = new DialogParameters { };
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<FilterDialog>("Добавление фильтров", parameters, options);
        var result = await dialog.Result;
        if (result != null)
        {
            if (!result.Cancelled)
            {
                var filterResult = await advertisementService.AddFilter(((FilterDialog)dialog.Dialog).model, _selectedPage);
                advertisements = filterResult.Advertisements;
                count = filterResult.Count / countAdvertisementOnPage + 1;
                _pathes = await GetImagesPath(advertisements);
            }
            else
                await ReloadData();
        }
        else
            Snackbar.Add("Произошла непредвиденная ошибка. Попробуйте повторить операцию позже.", Severity.Error);
    }

    private void Open(AdvertisementResponse advertisementResponse)
    {
        var parameters = new DialogParameters { };
        parameters.Add("advertisementResponse", advertisementResponse);
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<OpenAdvertisementDialog>("Подробности", parameters, options);
    }
}
    