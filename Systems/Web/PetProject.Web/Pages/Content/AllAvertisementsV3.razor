@page "/AllAdvertisements_V3"
@layout MainLayout

@attribute [Authorize]

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IAdvertisementService advertisementService
@inject NavigationManager navigationManager
@inject ICommentService commentService

@using PetProject.Web.Pages.Advertisement.Models
@using PetProject.Web.Pages.Advertisement.Models.Advertisement
@using PetProject.Web.Pages.Advertisement.Services
@using PetProject.Web.Components
@using PetProject.Web.Pages.Advertisement.Services.Advertisement
@using PetProject.Web.Pages.Content.Models.Comment
@using PetProject.Web.Pages.Content.Services.Comment


<MudText Typo="Typo.h4" Class="ma-8">Все объявления_V3</MudText>


@if (papers > 0)
{
    <MudGrid>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="@((e) => AddAdvertisement())" Style="margin-left:35px;">Добавить объявление</MudButton>
    
        
            <MudItem xs="12" Style="margin-left:25px;margin-right:25px;">
                <MudGrid Justify="justification">   
                @if (pathes != null)
                {
                    @for (int i = 0; i < papers; i++)
                    {
                        int localindex = i;
                        <MudItem xs="3">
                            <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full py-8" onclick="@ReloadData()">
                                <MudImage Width="200"
                                Height="150"
                                Src="@pathes[localindex]"
                                Alt="Mony the dog"
                                Elevation="25"
                                Class="rounded-lg"                              
                                />
                                <Row Style="margin-top:15px;">
                                    <MudIconButton Icon="@Icons.Filled.RemoveRedEye" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Small" />
                                    <MudIconButton Icon="@Icons.Material.Filled.FavoriteBorder" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Small" />
                                    <MudIconButton Icon="@Icons.Filled.Announcement" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Small" />
                                    <MudIconButton Icon="@Icons.Filled.AddComment" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Small" />
                                    <MudIconButton Icon="@Icons.Filled.Subscriptions" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Small" />
                                </Row>
                            </MudPaper>                        
                        </MudItem>
                    }
                }
                </MudGrid>
            </MudItem>    
    </MudGrid>
}
else
{
    <MudItem xxl="12">
        <MudProgressCircular Color="MudBlazor.Color.Success" Indeterminate="true" Style="height:70px;width:70px; position:absolute;top: 350%;left: 50%;" />
    </MudItem>
}
@code {
    private List<AdvertisementResponse> advertisementListItems = new List<AdvertisementResponse>();
    private async Task ReloadData()
    {
        IEnumerable<AdvertisementResponse> resultList = await advertisementService.GetAdvertisements();
        advertisementListItems = resultList.ToList();
        //papers = advertisementListItems.Count();
        papers = 3;
        pathes = new string[3] 
        { "pictures/first.jpeg", "pictures/second.jpg", "pictures/third.jpg" };
    }      

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    int papers { get; set; }
    string[] pathes { get; set; }

    Justify justification = Justify.FlexStart;

    private async Task AddAdvertisement()
    {
        var parameters = new DialogParameters { };
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = DialogService.Show<AdvertisementDialog>("Добавить объявление", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var addResult = await advertisementService.AddAdvertisement(((AdvertisementDialog)dialog.Dialog).model);
            await OnInitializedAsync();
            if (addResult.ErrorCode != 0)
                Snackbar.Add(addResult.Message, Severity.Error);
        }
    }

}
    