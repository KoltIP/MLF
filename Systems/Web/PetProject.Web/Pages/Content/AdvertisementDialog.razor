@using PetProject.Web.Pages.Advertisement.Models.Breed
@using PetProject.Web.Pages.Advertisement.Models.Color
@using PetProject.Web.Pages.Advertisement.Models.Type
@using PetProject.Web.Pages.Content.Models.Breed
@using PetProject.Web.Pages.Content.Models.Color
@using PetProject.Web.Pages.Content.Models.Type
@using PetProject.Web.Pages.Advertisement.Services.Advertisement
@using PetProject.Web.Pages.Advertisement.Models.Advertisement
@using MudBlazor.Interfaces;
@using MudBlazor.Components;
@using MudBlazor.Internal;

@inherits MudComponentBase


@inject IAdvertisementService advertisementService

<MudDialog>
    <DialogContent>
        <MudForm Model="model" @ref="form" Validation="@(modelValidator.ValidateValue)">
            <MudGrid>


                <MudItem xs="12">
                    <MudTextField Label="Имя" @bind-Value="model.PetName"
                                  For="@(() => model.PetName)"
                                  Required="true"
                                  RequiredError="Имя обязательно!"
                                  >
                    </MudTextField>
                </MudItem>


                <MudItem xs="12" >
                    <MudTextField Label="Описание"
                                  For="@(() => model.PetDescription)"
                                  @bind-Value="model.PetDescription"
                                  Required="true"
                                  RequiredError="Описание обязательно!"></MudTextField>
                </MudItem>


                <MudItem xs="12" >
                    <MudTextField Label="Вознаграждение"
                                  For="@(() => model.Price)"
                                  @bind-Value="model.Price"
                                  Required="true"
                                  RequiredError="Вознаграждение обязательно!"></MudTextField>
                </MudItem>


                <MudItem xs="12" sm="6">
                    <MudSelect @ref="selectColor" T="int" Label="Цвет" @bind-Value="model.PetColorId" For="@(() => model.PetColorId)">
                        <MudSelectItem T="int" Value="0">&nbsp;</MudSelectItem>
                        @foreach (var color in _colors)
                        {
                            <MudSelectItem T="int" Value="@color.Id">@color.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>


                <MudItem xs="12" sm="6">
                    <MudSelect @ref="selectType" T="int" Label="Тип" @bind-Value="model.PetTypeId" For="@(() => model.PetTypeId)">
                        <MudSelectItem T="int" Value="0">&nbsp;</MudSelectItem>
                        @foreach (var type in _typies)
                        {
                            <MudSelectItem T="int" Value="@type.Id">@type.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>


                <MudItem xs="12" sm="6">
                    <MudSelect OnOpen="()=>LoadDependendenseBreeds()" @ref="selectBreed" T="int" Label="Порода" @bind-Value="model.PetBreedId" For="@(() => model.PetBreedId)">
                        <MudSelectItem T="int" Value="0">&nbsp;</MudSelectItem>
                        @foreach (var breed in _breeds)
                        {
                            <MudSelectItem T="int" Value="@breed.Id">@breed.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                        <ButtonTemplate>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="@context">
                                Upload Files
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                    @if (files != null)
                    {
                        <MudText Typo="@Typo.h6">@files.Count() File@(files.Count() == 1 ? "" : "s"):</MudText>
                        <MudList>
                            @foreach (var file in files)
                            {
                                <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                                    @file.Name <code>@file.Size bytes</code>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudItem>

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отмена</MudButton>
        <MudButton Color="MudBlazor.Color.Primary" OnClick="Submit">Ок</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;

    MudForm form = default!;
    MudSelect<int> selectBreed = default!;
    MudSelect<int> selectType = default!;
    MudSelect<int> selectColor = default!;

    AdvertisementModelValidator modelValidator = new AdvertisementModelValidator();

    private List<TypeModel> _typies { get; set; } = new List<TypeModel>();
    private List<BreedModel> _breeds { get; set; } = new List<BreedModel>();
    private List<ColorModel> _colors { get; set; } = new List<ColorModel>();

    bool isNew = false;

    [Parameter]
    public int? AdvertisementId { get; set; } = default;

    [Parameter]
    public AdvertisementModel model { get; set; } = new() { PetTypeId = 0, PetBreedId = 0, PetColorId = 0};

    protected override async Task OnInitializedAsync()
    {
        var typies = await advertisementService.GetTypeList();
        _typies.AddRange(typies);

        var breeds = await advertisementService.GetBreedList();
        _breeds.AddRange(breeds);

        var colors = await advertisementService.GetColorList();
        _colors.AddRange(colors);

        isNew = AdvertisementId == null;
        if (!isNew)
        {
            var advertisement = await advertisementService.GetAdvertisement(AdvertisementId ?? 0);

            model.PetName = advertisement.PetName;
            model.PetDescription = advertisement.PetDescription;
            model.Price = advertisement.Price;
            model.Id = advertisement.Id;
            model.PetTypeId = advertisement.PetTypeId;
            model.PetBreedId = advertisement.PetBreedId;
            model.PetColorId = advertisement.PetColorId;            
        }

        await selectType.SelectOption(model.PetTypeId);
        await selectBreed.SelectOption(model.PetBreedId);
        await selectColor.SelectOption(model.PetColorId);
        form.ResetValidation();
    }

    public async Task LoadDependendenseBreeds()
    {
        int? selectTypeValue = selectType.Value;
        if (selectTypeValue.HasValue)        
            _breeds = (await advertisementService.GetBreedsWithTypeId(selectTypeValue.Value)).ToList();        
    }

    async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    void Cancel() => MudDialog.Cancel();

    IList<IBrowserFile> files = new List<IBrowserFile>();
    void UploadFiles(IBrowserFile file)
    {        
        files.Add(file);
    }
}