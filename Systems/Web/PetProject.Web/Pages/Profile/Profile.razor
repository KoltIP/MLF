@page "/profile"
@layout MainLayout

@using PetProject.Web.Pages.Profile.Models
@using PetProject.Web.Pages.Profile.Dialog
@using System.ComponentModel.DataAnnotations
@using PetProject.Web.Pages.Profile.Services

@inject IProfileService profileService
@inject IDialogService DialogService

@attribute [Authorize]

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Профиль</MudText>
    @if (!isLoading)
    {
        <MudGrid Spacing="6" Class="mt-16">
            <MudItem xs="12">
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField T="string" Variant="Variant.Outlined" Label="Адрес электронной почты" Text="@email" Adornment="Adornment.End" AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Material.Filled.Edit" OnAdornmentClick="@((e) => ChangeEmail())"   
                    ReadOnly
                        />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="string" Variant="Variant.Outlined" Label="Имя" Text="@name" Adornment="Adornment.End" AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Material.Filled.Edit" OnAdornmentClick="@((e) => ChangeName())"    
                    ReadOnly
                        />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="string" Variant="Variant.Outlined" Label="Фамилия" Text="@surname" Adornment="Adornment.End" AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Material.Filled.Edit" OnAdornmentClick="@((e) => ChangeSurname())"    
                    ReadOnly
                        />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="string" Variant="Variant.Outlined" Label="Отчество" Text="@patronymic" Adornment="Adornment.End" AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Material.Filled.Edit" OnAdornmentClick="@((e) => ChangePatronymic())"    
                    ReadOnly
                        />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="string" Variant="Variant.Outlined" Label="Имя пользователя" Text="@nickname" Adornment="Adornment.End" AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Material.Filled.Edit" OnAdornmentClick="@((e) => ChangeNickname())"    
                    ReadOnly
                        />
                    </MudItem>
                    <MudItem xs="9">
                        <MudButton 
                                EndIcon="@Icons.Material.Filled.Edit"
                                IconColor="Color.Primary"
                                Variant="Variant.Outlined"
                                Color="Color.Primary"
                                Size="Size.Large"
                                ButtonType="MudBlazor.ButtonType.Button"
                                OnClick="@((e) => ChangePassword())">
                            Изменить пароль
                        </MudButton>
                    </MudItem>
                    <MudItem xs="3">
                        <MudButton EndIcon="@Icons.Material.Filled.Delete"
                                IconColor="Color.Primary"
                                Variant="Variant.Outlined"
                                Color="Color.Primary"
                                Size="Size.Large"
                                ButtonType="MudBlazor.ButtonType.Button"
                                OnClick="@((e) => DeleteProfile())">
                            Удалить профиль
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <MudItem xs="12">
            <MudProgressCircular Color="MudBlazor.Color.Success" Indeterminate="true" Style="height:70px;width:70px; position:absolute;top: 250%;left: 55%;" />
        </MudItem>
    }
</MudContainer>

@code
{
    private bool isLoading { get; set; } = true;

    private ProfileModel profileModel = new ProfileModel();

    private string name;
    private string surname;
    private string patronymic;
    private string nickname;
    private string email;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            profileModel = await profileService.GetProfile();
            name = profileModel.Name;
            surname = profileModel.Surname;
            patronymic = profileModel.Patronymic;
            nickname = profileModel.NickName;
            email = profileModel.Email;

            isLoading = false;
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }        
    }

    private async Task DeleteProfile()
    {
        await profileService.DeleteProfile();        
    }

    private async Task ChangeName()
    {
        var parameters = new DialogParameters {};
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = DialogService.Show<NameDialog>("Изменить имя", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            profileModel = await profileService.GetProfile();
            name = profileModel.Name;
            surname = profileModel.Surname;
            patronymic = profileModel.Patronymic;
            nickname = profileModel.NickName;
            email = profileModel.Email;
        }
    }

    private async Task ChangeSurname()
    {
        var parameters = new DialogParameters {};
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = DialogService.Show<SurnameDialog>("Изменить фамилию", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            profileModel = await profileService.GetProfile();
            name = profileModel.Name;
            surname = profileModel.Surname;
            patronymic = profileModel.Patronymic;
            nickname = profileModel.NickName;
            email = profileModel.Email;
        }
    }

    private async Task ChangePatronymic()
    {
        var parameters = new DialogParameters {};
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = DialogService.Show<PatronymicDialog>("Изменить отчество", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            profileModel = await profileService.GetProfile();
            name = profileModel.Name;
            surname = profileModel.Surname;
            patronymic = profileModel.Patronymic;
            nickname = profileModel.NickName;
            email = profileModel.Email;
        }
    }

    private async Task ChangeNickname()
    {
        var parameters = new DialogParameters {};
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = DialogService.Show<NicknameDialog>("Изменить имя пользователя");
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            profileModel = await profileService.GetProfile();
            name = profileModel.Name;
            surname = profileModel.Surname;
            patronymic = profileModel.Patronymic;
            nickname = profileModel.NickName;
            email = profileModel.Email;
        }
    }

    private async Task ChangeEmail()
    {
        var parameters = new DialogParameters {};
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = DialogService.Show<EmailDialog>("Изменить адрес электронной почты", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            profileModel = await profileService.GetProfile();
            name = profileModel.Name;
            surname = profileModel.Surname;
            patronymic = profileModel.Patronymic;
            nickname = profileModel.NickName;
            email = profileModel.Email;
        }
    }

    private async Task ChangePassword()
    {
        var parameters = new DialogParameters {};
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = DialogService.Show<PasswordDialog>("Изменить пароль", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            profileModel = await profileService.GetProfile();
            name = profileModel.Name;
            surname = profileModel.Surname;
            patronymic = profileModel.Patronymic;
            nickname = profileModel.NickName;
            email = profileModel.Email;
        }
    }
}